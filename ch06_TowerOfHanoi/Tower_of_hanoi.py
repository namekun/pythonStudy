# 하노이의 탑 규칙
# 크기가 다른 원반 n개를 출발점 기둥에서 도착점 기둥으로 전부 옮겨야한다.
# 원반은 한 번에 한 개씩만 옮길 수 있다.
# 원반을 옮길 때는 한 기둥의 맨 위 원반을 뽑아서, 다른 기둥의 맨 위로만 옮길 수 있다.
# 원반을 옮기는 과정에서 큰 원반을 작원 원반 위로 올릴 수 없다.

# 하노이의 탑 푸는 방법
# 우선 1, 2개 층의 탑이 어떻게 1번기둥에서 3번기둥으로 움직이는지 해당 규칙부터 파악해본다.
# 그 후 3개짜리가 어떻게 그대로 옮겨질 수 있는지 파악한다.
# 파악한 규칙을 통해서 n층의 하노이의 탑을 옮기는 코드를 짜보자.

# 하노이의 탑 알고리즘
# 1-1. 원반이 1개이면 그냥 옮기면 된다.
# 1-2. 원반이 n개라면
#      1번 기둥에 있는 n개중 n-1개의 원반을 2번 기둥으로 옮긴다.(3번 기둥을 보조 기둥으로 사용)
#      1번 기둥에 남아 있는 가장 큰 원반을 마지막 기둥으로 옮긴다.
#      2번 기둥에 있는 n-1개의 원반을 다시 3번 기둥으로 옮긴다.(1번 기둥을 보조 기둥으로 사용)

# 입력 : 옮기려는 원반의 수 n
#        옮길 원반이 현재 있는 출발점 기둥 from_pos
#        원반을 옮길 도착점 기둥 to_pos
#        옮기는 과정에서 사용할 보조 기둥 aux_pos
# 출력 : 원반을 옮기는 순서

def hanoi(n, from_pos, to_pos, aux_pos):
    if n == 1:
        print(from_pos, "=>", to_pos)
        return

    hanoi(n - 1, from_pos, aux_pos, to_pos)
    print(from_pos, "=>", to_pos)
    hanoi(n - 1, aux_pos, to_pos, from_pos)


print("n = 1")
hanoi(1, 1, 3, 2)
print()
print("n = 2")
hanoi(2, 1, 3, 2)
print()
print("n = 3")
hanoi(3, 1, 3, 2)
